name: RT-Thread BSP build check

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
    inputs:
      bsp_options:
        description: 'Optional switches to pass to xpm install'
        required: false
        type: string
        default: 'qemu-vexpress-a9'
      bsp_sub:
        description: 'Optional loglevel for xpm install'
        required: false
        default: 'stm32/stm32l010-st-nucleo'
        type: choice
        options:
          - "stm32/stm32l4r9-st-sensortile-box"
          - "stm32/stm32l010-st-nucleo"
          - "stm32/stm32l053-st-nucleo"
          - "stm32/stm32l412-st-nucleo"
          - "stm32/stm32l431-BearPi"
          - "stm32/stm32l432-st-nucleo"
          - "stm32/stm32l433-ali-startkit"
          - "stm32/stm32l433-st-nucleo"
          - "stm32/stm32l452-st-nucleo"
          - "stm32/stm32l475-atk-pandora"
      bsp_tool_chain:
        description: 'Choice tool_chain'
        required: false
        default: 'sourcery-arm'
        type: choice
        options:
          - "sourcery-arm"
          - "llvm-arm"
          - "sourcery-aarch64"
permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  build:
    runs-on: ubuntu-latest
    name: ${{ github.event.inputs.bsp_options }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Tools
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -qq install gcc-multilib libncurses5 libncurses5-dev libncursesw5-dev scons
          sudo python -m pip install --upgrade pip -qq
          pip install requests -qq
          git config --global http.postBuffer 524288000
          python -c "import tools.menuconfig; tools.menuconfig.touch_env()"
          echo "RTT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV
          echo "RTT_CC=gcc" >> $GITHUB_ENV

      - name: Install Arm ToolChains
        if: ${{ github.event.inputs.bsp_tool_chain  == 'sourcery-arm' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.3/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          sudo tar xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
          /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gcc --version
          echo "RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin" >> $GITHUB_ENV

      - name: Install LLVM-Arm ToolChains
        if: ${{ github.event.inputs.bsp_tool_chain == 'llvm-arm' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm/releases/download/release-16.0.0/LLVMEmbeddedToolchainForArm-16.0.0-Linux-x86_64.tar.gz
          sudo tar zxf LLVMEmbeddedToolchainForArm-16.0.0-Linux-x86_64.tar.gz -C /opt
          /opt/LLVMEmbeddedToolchainForArm-16.0.0-Linux-x86_64/bin/clang --version
          echo "RTT_CC=llvm-arm" >> $GITHUB_ENV
          echo "RTT_EXEC_PATH=/opt/LLVMEmbeddedToolchainForArm-16.0.0-Linux-x86_64/bin" >> $GITHUB_ENV

      - name: Install AArch64 ToolChains
        if: ${{ github.event.inputs.bsp_tool_chain  == 'sourcery-aarch64' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.6/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz
          sudo tar -xf gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz -C /opt
          /opt/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf/bin/aarch64-none-elf-gcc --version
          echo "RTT_EXEC_PATH=/opt/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf/bin" >> $GITHUB_ENV

      - name: Install Mips ToolChains
        if: ${{  github.event.inputs.bsp_tool_chain  == 'sourcery-mips' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.1/mips-2016.05-7-mips-sde-elf-i686-pc-linux-gnu.tar.bz2
          sudo tar xjf mips-2016.05-7-mips-sde-elf-i686-pc-linux-gnu.tar.bz2 -C /opt
          /opt/mips-2016.05/bin/mips-sde-elf-gcc --version
          echo "RTT_EXEC_PATH=/opt/mips-2016.05/bin" >> $GITHUB_ENV

      - name: Install Riscv64-unknown-elf ToolChains
        if: ${{ github.event.inputs.bsp_tool_chain  == 'sourcery-riscv64-unknown-elf' && success() }}
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.4/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          sudo tar zxvf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz -C /opt
          /opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin/riscv64-unknown-elf-gcc --version
          echo "RTT_EXEC_PATH=/opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin" >> $GITHUB_ENV

      - name: Install Riscv-none-embed ToolChains
        if: ${{ github.event.inputs.bsp_tool_chain  == 'sourcery-riscv-none-embed' && success() }}
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.5/xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz
          sudo tar zxvf xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz -C /opt
          /opt/xpack-riscv-none-embed-gcc-8.3.0-2.3/bin/riscv-none-embed-gcc --version
          echo "RTT_EXEC_PATH=/opt/xpack-riscv-none-embed-gcc-8.3.0-2.3/bin" >> $GITHUB_ENV

      - name: Bsp Scons Compile
        #if: ${{ matrix.legs.SUB_RTT_BSP == ${{ github.event.inputs.bsp_options }} }}
        shell: bash
        run: |
          source ~/.env/env.sh
          echo ${{ github.event.inputs.bsp_options }}
          ls bsp/${{ github.event.inputs.bsp_options }}/Kconfig && scons -C bsp/${{ github.event.inputs.bsp_options }} --pyconfig-silent
          pushd bsp/${{ github.event.inputs.bsp_options }} && pkgs --update && popd
          scons -C bsp/${{ github.event.inputs.bsp_options }} -j$(nproc) 
          mkdir ${{ github.workspace }}/exe
          cp bsp/${{ github.event.inputs.bsp_options }} ${{ github.workspace }}/exe/
          scons --dist -C bsp/${{ github.event.inputs.bsp_options }}
          ls bsp/${{ github.event.inputs.bsp_options }}/dist
          pwd
          
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.bsp_options }}
          path: ${{ github.workspace }}/bsp/${{ github.event.inputs.bsp_options }}/dist/project.zip
          
      - uses: actions/upload-artifact@v3
        with:
          name: exe
          path: ${{ github.workspace }}/exe/*
